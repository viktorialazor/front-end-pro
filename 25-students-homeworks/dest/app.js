class StudentsApi{static URL="https://62e67c22de23e263792d127c.mockapi.io/students/";static request(t="",e="GET",n){return fetch(StudentsApi.URL+t,{method:e,body:n?JSON.stringify(n):void 0,headers:{"Content-type":"application/json"}}).catch(t=>{throw new Error("StudentsApi cannot execute request: "+t.message)})}static getList(){return StudentsApi.request().then(t=>{if(t.ok)return t.json();throw new Error("Cannot retrieve students list")})}static create(t){return StudentsApi.request("","POST",t).then(t=>{if(t.ok)return t.json();throw new Error("Cannot create new student")})}static update(e,t){return StudentsApi.request(e,"PUT",t).then(t=>{if(t.ok)return t.json();throw new Error(`Cannot update student with id '${e}'`)})}static delete(e){return StudentsApi.request(e,"DELETE").then(t=>{if(t.ok)return t.json();throw new Error(`Cannot delete student with id '${e}'`)})}}class Collection{#list;constructor(){this.#list=[]}fetch(){return StudentsApi.getList().then(t=>{this.setList(t)}).catch(this.showError)}create(t){return StudentsApi.create(t).then(t=>(this.add(t),t)).catch(this.showError)}update(t,e){const n=this.find(t);return Object.keys(e).forEach(t=>n[t]=e[t]),StudentsApi.update(t,e).catch(this.showError),Promise.resolve()}delete(e){return this.#list=this.#list.filter(t=>t.id!==e),StudentsApi.delete(e).catch(this.showError),Promise.resolve()}setList(t){this.#list=t}getList(){return this.#list}add(t){this.#list.push(t)}find(e){return this.#list.find(t=>t.id===e)}showError(t){alert(t.message)}}class StudentsTableView{#$container;constructor(t){this.#$container=t}renderTable(){var t=this.generateTableHtml();this.#$container.append(t)}generateTableHtml(){return`
      <table class="students-marks">
        <thead class="students-marks__headline headline">
          <tr class="headline__row">
            <td class="headline__text">Name</td>
            <td class="headline__text" colspan="10">Marks</td>
            <td class="headline__text">Actions</td>
          </tr>
        </thead>
      </table>
    `}}class StudentsInfoView{static STUDENTS_MARKS_SELECTOR=".students-marks";static STUDENT_INFO_SELECTOR=".student-info";static STUDENT_INFO_MARK_SELECTOR=".student-info__mark";static DELETE_BTN_SELECTOR=".delete-btn";static MIN_MARK=0;static MAX_MARK=10;static ERROR_DATA="Enter nuber from 0 to 10";#$contentEl;#options;constructor(t){this.#options=t,this.#$contentEl=this.initInfoView()}initInfoView(){return $('<tbody class="students-marks__info students-info"></tbody>').on("click",StudentsInfoView.DELETE_BTN_SELECTOR,t=>this.onDeleteBtnClick(t)).on("focusout",StudentsInfoView.STUDENT_INFO_MARK_SELECTOR,t=>this.onMarkFieldFocusout(t))}onDeleteBtnClick(t){t.preventDefault();t=this.getStudentId(t.target);this.#options.onDelete(t)}onMarkFieldFocusout(t){if(t.stopPropagation(),this.isMarkValid(t.target.value)){const n=[];var e=this.getStudentId(t.target);const s=this.getStudentItem($(t.target)),i=s.find(StudentsInfoView.STUDENT_INFO_MARK_SELECTOR);i.each((t,e)=>n.push(e.value));t={marks:n};this.#options.onUpdate(e,t)}else this.showError(StudentsInfoView.ERROR_DATA)}deleteElement(t){const e=this.getElementById(t);e.remove()}updateElement(t,e){const n=this.getElementById(t);n.replaceWith(this.generateStudentHtml(e))}getStudentId(t){return t.closest(StudentsInfoView.STUDENT_INFO_SELECTOR).dataset.id}getElementById(t){return this.#$contentEl.find(`[data-id='${t}']`)}getStudentItem(t){return t.closest(StudentsInfoView.STUDENT_INFO_SELECTOR)}renderInfo(t){const e=t.find(StudentsInfoView.STUDENTS_MARKS_SELECTOR);e.append(this.#$contentEl)}renderList(t){t=t.map(t=>this.generateStudentHtml(t)).join("");this.#$contentEl.html(t)}renderItem(t){t=this.generateStudentHtml(t);this.#$contentEl.append(t)}generateStudentHtml(t){var e=0<t.marks.length?t.marks.map(t=>`<td><input class="student-info__mark" type="text" value="${t}"></td>`).join(""):this.getDefaultMarks();return`
      <tr class="student-info__row student-info" data-id=${t.id}>
        <td>${t.name}</td>
        ${e}
        <td><button class="student-info__button delete-btn" type="button">Delete</button></td>
      </tr>
    `}getDefaultMarks(){let e="";for(let t=StudentsInfoView.MIN_MARK;t<StudentsInfoView.MAX_MARK;t++)e+='<td><input class="student-info__mark" type="text" value="0"></td>';return e}isMarkValid(t){return!isNaN(Number(t))&&""!==t.trim()&&Number(t)>StudentsInfoView.MIN_MARK&&Number(t)<=StudentsInfoView.MAX_MARK}showError(t){alert(t)}}class StudentsFormView{static FORM_SELECTOR=".students-form";static FORM_INPUT_SELECTOR=".student-name-field";static ERROR_EMPTY_FIELD="The field must be filled.";#options;#$container;#$form;#$formInput;constructor(t,e){this.#options=t,this.#$container=e,this.renderForm(this.#$container),this.#$formInput=$(StudentsFormView.FORM_SELECTOR).find(StudentsFormView.FORM_INPUT_SELECTOR),this.#$form=this.initFormView()}initFormView(){return $(StudentsFormView.FORM_SELECTOR).on("submit",t=>this.onFormSubmit(t))}onFormSubmit(t){t.preventDefault();t=this.#$formInput.val();this.isDataValue(t)?this.#options.onCreate({name:t}):this.showError(StudentsFormView.ERROR_EMPTY_FIELD)}renderForm(t){var e=this.generateStudentsFormHtml();t.append(e)}generateStudentsFormHtml(){return`
    <form class="students-form">
      <input class="students-form__input student-name-field" type="text" aria-label="student-name-field">
      <button class="students-form__button add-button">Save</button>
    </form>
    `}clearForm(){this.#$form[0].reset()}isDataValue(t){return""!==t.trim()}showError(t){alert(t)}}class Controller{#$container;constructor(t){this.#$container=t,this.collection=new Collection,this.studentsTableView=new StudentsTableView(this.#$container),this.studentsTableView.renderTable(),this.studentsInfoView=new StudentsInfoView({onDelete:t=>this.collection.delete(t).then(()=>this.studentsInfoView.deleteElement(t)),onUpdate:(e,t)=>this.collection.update(e,t).then(()=>{var t=this.collection.find(e);this.studentsInfoView.updateElement(e,t)})}),this.studentsFormView=new StudentsFormView({onCreate:t=>this.collection.create(t).then(t=>{this.studentsInfoView.renderItem(t),this.studentsFormView.clearForm()})},this.#$container),this.studentsInfoView.renderInfo(this.#$container),this.collection.fetch().then(()=>this.renderList())}renderList(){this.studentsInfoView.renderList(this.collection.getList())}}new Controller($("#root"));
//# sourceMappingURL=app.js.map