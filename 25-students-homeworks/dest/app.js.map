{"version":3,"sources":["StudentsApi.js","Collection.js","StudentsTableView.js","StudentsInfoView.js","StudentsFormView.js","Controller.js"],"names":["StudentsApi","URL","request","url","method","body","fetch","JSON","stringify","undefined","headers","Content-type","catch","Error","e","message","getList","then","res","ok","json","create","student","update","id","changes","delete","Collection","#list","constructor","this","list","setList","showError","newStudent","add","oldStudent","find","Object","keys","forEach","key","Promise","resolve","filter","item","push","alert","StudentsTableView","#$container","$container","renderTable","tableHtml","generateTableHtml","append","StudentsInfoView","STUDENTS_MARKS_SELECTOR","STUDENT_INFO_SELECTOR","STUDENT_INFO_MARK_SELECTOR","DELETE_BTN_SELECTOR","MIN_MARK","MAX_MARK","ERROR_DATA","#$contentEl","#options","options","initInfoView","$","on","onDeleteBtnClick","onMarkFieldFocusout","preventDefault","getStudentId","target","onDelete","stopPropagation","isMarkValid","value","studentMarks","$studentItem","getStudentItem","$markList","each","_","marks","onUpdate","deleteElement","$studentEl","getElementById","remove","updateElement","updateStudent","replaceWith","generateStudentHtml","el","closest","dataset","renderInfo","$el","$wrapper","renderList","listHtml","map","join","html","renderItem","itemHtml","marksList","length","mark","getDefaultMarks","name","let","i","isNaN","Number","trim","StudentsFormView","FORM_SELECTOR","FORM_INPUT_SELECTOR","ERROR_EMPTY_FIELD","#$form","#$formInput","renderForm","initFormView","onFormSubmit","studentName","val","isDataValue","onCreate","formHtml","generateStudentsFormHtml","clearForm","reset","Controller","collection","studentsTableView","studentsInfoView","studentsFormView"],"mappings":"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","file":"app.js","sourcesContent":["class StudentsApi {\r\n  static URL = 'https://62e67c22de23e263792d127c.mockapi.io/students/';\r\n\r\n  static request(url = '', method = 'GET', body) {\r\n    return fetch(StudentsApi.URL + url, {\r\n      method,\r\n      body: body ? JSON.stringify(body) : undefined,\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      throw new Error(`StudentsApi cannot execute request: ${e.message}`);\r\n    })\r\n  }\r\n\r\n  static getList() {\r\n    return StudentsApi\r\n      .request()\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        throw new Error('Cannot retrieve students list');\r\n      })\r\n  }\r\n\r\n  static create(student) {\r\n    return StudentsApi\r\n      .request('', 'POST', student)\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        throw new Error('Cannot create new student');\r\n      })\r\n  }\r\n\r\n  static update(id, changes) {\r\n    return StudentsApi\r\n      .request(id, 'PUT', changes)\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        throw new Error(`Cannot update student with id '${id}'`);\r\n      })\r\n  }\r\n\r\n  static delete(id) {\r\n    return StudentsApi\r\n      .request(id, 'DELETE')\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n\r\n        throw new Error(`Cannot delete student with id '${id}'`);\r\n      })\r\n  }\r\n}\r\n","class Collection {\r\n  #list;\r\n\r\n  constructor() {\r\n    this.#list = [];\r\n  }\r\n\r\n  fetch() {\r\n    return StudentsApi\r\n      .getList()\r\n      .then(list => {\r\n        this.setList(list);\r\n      })\r\n      .catch(this.showError)\r\n  }\r\n\r\n  create(newStudent) {\r\n    return StudentsApi\r\n      .create(newStudent)\r\n      .then(res => {\r\n        this.add(res);\r\n\r\n        return res;\r\n      })\r\n      .catch(this.showError);\r\n  }\r\n\r\n  update(id, changes) {\r\n    const oldStudent = this.find(id);\r\n\r\n    Object.keys(changes).forEach(key => oldStudent[key] = changes[key]);\r\n\r\n    StudentsApi\r\n      .update(id, changes)\r\n      .catch(this.showError);\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  delete(id) {\r\n    this.#list = this.#list.filter(item => item.id !== id);\r\n\r\n    StudentsApi\r\n      .delete(id)\r\n      .catch(this.showError)\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  setList(list) {\r\n    this.#list = list;\r\n  }\r\n\r\n  getList() {\r\n    return this.#list;\r\n  }\r\n\r\n  add(student) {\r\n    this.#list.push(student);\r\n  }\r\n\r\n  find(id) {\r\n    return this.#list.find(item => item.id === id);\r\n  }\r\n\r\n  showError(e) {\r\n    alert(e.message);\r\n  }\r\n}\r\n","class StudentsTableView {\r\n  #$container;\r\n\r\n  constructor($container) {\r\n    this.#$container = $container;\r\n  }\r\n\r\n  renderTable() {\r\n    const tableHtml = this.generateTableHtml();\r\n\r\n    this.#$container.append(tableHtml);\r\n  }\r\n\r\n  generateTableHtml() {\r\n    return `\r\n      <table class=\"students-marks\">\r\n        <thead class=\"students-marks__headline headline\">\r\n          <tr class=\"headline__row\">\r\n            <td class=\"headline__text\">Name</td>\r\n            <td class=\"headline__text\" colspan=\"10\">Marks</td>\r\n            <td class=\"headline__text\">Actions</td>\r\n          </tr>\r\n        </thead>\r\n      </table>\r\n    `;\r\n  }\r\n}\r\n","class StudentsInfoView {\r\n  static STUDENTS_MARKS_SELECTOR = '.students-marks';\r\n  static STUDENT_INFO_SELECTOR = '.student-info';\r\n  static STUDENT_INFO_MARK_SELECTOR = '.student-info__mark';\r\n  static DELETE_BTN_SELECTOR = '.delete-btn';\r\n  static MIN_MARK = 0;\r\n  static MAX_MARK = 10;\r\n  static ERROR_DATA = 'Enter nuber from 0 to 10';\r\n\r\n  #$contentEl;\r\n  #options;\r\n\r\n  constructor(options) {\r\n    this.#options = options;\r\n\r\n    this.#$contentEl = this.initInfoView();\r\n  }\r\n\r\n  initInfoView() {\r\n    return $('<tbody class=\"students-marks__info students-info\"></tbody>')\r\n      .on('click', StudentsInfoView.DELETE_BTN_SELECTOR, (e) => this.onDeleteBtnClick(e))\r\n      .on('focusout', StudentsInfoView.STUDENT_INFO_MARK_SELECTOR, (e) => this.onMarkFieldFocusout(e));\r\n  }\r\n\r\n  onDeleteBtnClick(e) {\r\n    e.preventDefault();\r\n\r\n    const id = this.getStudentId(e.target);\r\n\r\n    this.#options.onDelete(id);\r\n  }\r\n\r\n  onMarkFieldFocusout(e) {\r\n    e.stopPropagation();\r\n\r\n    if (!this.isMarkValid(e.target.value)) {\r\n      this.showError(StudentsInfoView.ERROR_DATA);\r\n      return;\r\n    }\r\n\r\n    const studentMarks = [];\r\n    const id = this.getStudentId(e.target)\r\n    const $studentItem = this.getStudentItem($(e.target));\r\n    const $markList = $studentItem.find(StudentsInfoView.STUDENT_INFO_MARK_SELECTOR);\r\n\r\n    $markList.each((_, item) => studentMarks.push(item.value));\r\n\r\n    const changes = {\r\n      marks: studentMarks,\r\n    }\r\n\r\n    this.#options.onUpdate(id, changes);\r\n  }\r\n\r\n  deleteElement(id) {\r\n    const $studentEl = this.getElementById(id);\r\n\r\n    $studentEl.remove();\r\n  }\r\n\r\n  updateElement(id, updateStudent) {\r\n    const $studentEl = this.getElementById(id);\r\n\r\n    $studentEl.replaceWith(this.generateStudentHtml(updateStudent));\r\n  }\r\n\r\n  getStudentId(el) {\r\n    return el.closest(StudentsInfoView.STUDENT_INFO_SELECTOR).dataset.id;\r\n  }\r\n\r\n  getElementById(id) {\r\n    return this.#$contentEl.find(`[data-id='${id}']`);\r\n  }\r\n\r\n  getStudentItem(el) {\r\n    return el.closest(StudentsInfoView.STUDENT_INFO_SELECTOR);\r\n  }\r\n\r\n  renderInfo($el) {\r\n    const $wrapper = $el.find(StudentsInfoView.STUDENTS_MARKS_SELECTOR);\r\n\r\n    $wrapper.append(this.#$contentEl);\r\n  }\r\n\r\n  renderList(list) {\r\n    const listHtml = list.map(item => this.generateStudentHtml(item)).join('');\r\n\r\n    this.#$contentEl.html(listHtml);\r\n  }\r\n\r\n  renderItem(item) {\r\n    const itemHtml = this.generateStudentHtml(item);\r\n\r\n    this.#$contentEl.append(itemHtml);\r\n  }\r\n\r\n  generateStudentHtml(student) {\r\n    const marksList = student.marks.length > 0 ? student.marks.map(mark => `<td><input class=\"student-info__mark\" type=\"text\" value=\"${mark}\"></td>`).join('') : this.getDefaultMarks();\r\n\r\n    return `\r\n      <tr class=\"student-info__row student-info\" data-id=${student.id}>\r\n        <td>${student.name}</td>\r\n        ${marksList}\r\n        <td><button class=\"student-info__button delete-btn\" type=\"button\">Delete</button></td>\r\n      </tr>\r\n    `\r\n  }\r\n\r\n  getDefaultMarks() {\r\n    let marks = '';\r\n\r\n    for(let i = StudentsInfoView.MIN_MARK; i < StudentsInfoView.MAX_MARK; i++) {\r\n      marks += `<td><input class=\"student-info__mark\" type=\"text\" value=\"0\"></td>`\r\n    }\r\n\r\n    return marks;\r\n  }\r\n\r\n  isMarkValid(value) {\r\n    return !isNaN(Number(value)) && (value.trim() !== '') && (Number(value) > StudentsInfoView.MIN_MARK && Number(value) <= StudentsInfoView.MAX_MARK);\r\n  }\r\n\r\n  showError(message) {\r\n    alert(message);\r\n  }\r\n}\r\n","class StudentsFormView {\r\n  static FORM_SELECTOR = '.students-form';\r\n  static FORM_INPUT_SELECTOR = '.student-name-field';\r\n  static ERROR_EMPTY_FIELD = 'The field must be filled.';\r\n\r\n  #options;\r\n  #$container\r\n  #$form;\r\n  #$formInput\r\n\r\n  constructor(options, $container) {\r\n    this.#options = options;\r\n    this.#$container = $container;\r\n\r\n    this.renderForm(this.#$container);\r\n\r\n    this.#$formInput = $(StudentsFormView.FORM_SELECTOR).find(StudentsFormView.FORM_INPUT_SELECTOR);\r\n\r\n    this.#$form = this.initFormView();\r\n  }\r\n\r\n  initFormView() {\r\n    return $(StudentsFormView.FORM_SELECTOR).on('submit', (e) => this.onFormSubmit(e));\r\n  }\r\n\r\n  onFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const studentName = this.#$formInput.val();\r\n\r\n    if (!this.isDataValue(studentName)) {\r\n      this.showError(StudentsFormView.ERROR_EMPTY_FIELD);\r\n      return;\r\n    }\r\n\r\n    const newStudent = {\r\n      name: studentName,\r\n    };\r\n\r\n    this.#options.onCreate(newStudent);\r\n  }\r\n\r\n  renderForm($container) {\r\n    const formHtml = this.generateStudentsFormHtml();\r\n\r\n    $container.append(formHtml);\r\n  }\r\n\r\n  generateStudentsFormHtml() {\r\n    return `\r\n    <form class=\"students-form\">\r\n      <input class=\"students-form__input student-name-field\" type=\"text\" aria-label=\"student-name-field\">\r\n      <button class=\"students-form__button add-button\">Save</button>\r\n    </form>\r\n    `;\r\n  }\r\n\r\n  clearForm() {\r\n    this.#$form[0].reset();\r\n  }\r\n\r\n  isDataValue(message) {\r\n    return message.trim() !== '';\r\n  }\r\n\r\n  showError(message) {\r\n    alert(message);\r\n  };\r\n}\r\n","class Controller {\r\n  #$container;\r\n\r\n  constructor($container) {\r\n    this.#$container = $container;\r\n\r\n    this.collection = new Collection();\r\n    this.studentsTableView = new StudentsTableView(this.#$container);\r\n\r\n    this.studentsTableView.renderTable();\r\n\r\n    this.studentsInfoView = new StudentsInfoView({\r\n      onDelete: id => this.collection.delete(id).then(() => this.studentsInfoView.deleteElement(id)),\r\n      onUpdate: (id, changes) => this.collection.update(id, changes).then(() => {\r\n        const updateStudent = this.collection.find(id);\r\n        this.studentsInfoView.updateElement(id, updateStudent);\r\n      })\r\n    });\r\n\r\n    this.studentsFormView = new StudentsFormView({\r\n      onCreate: newStudent => this.collection.create(newStudent).then((res) => {\r\n        this.studentsInfoView.renderItem(res);\r\n        this.studentsFormView.clearForm();\r\n      })},\r\n      this.#$container);\r\n\r\n    this.studentsInfoView.renderInfo(this.#$container);\r\n    this.collection.fetch().then(() => this.renderList());\r\n  }\r\n\r\n  renderList() {\r\n    this.studentsInfoView.renderList(this.collection.getList());\r\n  }\r\n}\r\n"]}